/**********************************************************************
Copyright (c) 2019 Advanced Micro Devices, Inc. All rights reserved.
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
********************************************************************/

// WebGPU has extremely strict uniformity requirements that are incompatible with the current implementation of this shader.
#pragma exclude_renderers webgpu

#pragma multi_compile __ INDIRECT_TRACE
#pragma multi_compile __ FULL_HIT
#pragma multi_compile __ ANY_HIT

#include "intersect_structures.hlsl"
#include "transform.hlsl"
#include "intersector_common.hlsl"

uint g_constants_ray_count;
uint g_bvh_offset;
RWStructuredBuffer<BvhNode> g_bvh : register(u0);
RWStructuredBuffer<uint> g_ray_count: register(u1);
RWStructuredBuffer<Ray> g_rays: register(u2);
#if FULL_HIT
RWStructuredBuffer<FullHitData> g_hits: register(u3);
#else
RWStructuredBuffer<AnyHitData> g_hits: register(u3);
#endif
RWStructuredBuffer<uint> g_stack: register(u4);

StructuredBuffer<uint> g_trace_index_buffer;
StructuredBuffer<uint> g_trace_vertex_buffer;
int g_trace_vertex_stride;

#define GROUP_SIZE 128
#define LDS_STACK_SIZE 16
#define STACK_SIZE 64
groupshared uint lds_stack[LDS_STACK_SIZE * GROUP_SIZE];

/**
 * @brief Trace rays againsts given acceleration structure
 *
 **/
#pragma kernel TraceRays
[numthreads(GROUP_SIZE, 1, 1)]
void TraceRays(
    in uint gidx: SV_DispatchThreadID,
    in uint lidx: SV_GroupThreadID)
{
    VertexPoolDesc vertex_pool_desc;
    vertex_pool_desc.index_buffer = g_trace_index_buffer;
    vertex_pool_desc.vertex_buffer = g_trace_vertex_buffer;
    vertex_pool_desc.vertex_stride = g_trace_vertex_stride;

#if INDIRECT_TRACE
    const uint ray_count = g_ray_count[0];
#else
    const uint ray_count = g_constants_ray_count;
#endif

    if (gidx >= ray_count)
    {
        return;
    }

    uint sbegin = STACK_SIZE * gidx;
    uint sptr = sbegin;
    uint lds_sbegin = lidx * LDS_STACK_SIZE;
    uint lds_sptr = lds_sbegin;
    lds_stack[lds_sptr++] = INVALID_NODE;
    // prepare ray info for trace
    float3 ray_o = g_rays[gidx].origin;
    float3 ray_d = g_rays[gidx].direction;
    float  ray_maxt = g_rays[gidx].max_t;
    float  ray_mint = g_rays[gidx].min_t;
    float3 ray_invd = 1.0f / ray_d;
    float2 uv = float2(0.f, 0.f);

    // primitive index for geometry
    uint closest_prim = INVALID_NODE;
    // fetch root index from header
    uint node_index = g_bvh[g_bvh_offset + 0].parent;
    while (node_index != INVALID_NODE)
    {
        bool is_tri = (g_bvh[g_bvh_offset+1 + node_index].left_child == INVALID_NODE);
        if (is_tri)
        {
            int first_triangle = g_bvh[g_bvh_offset+1 + node_index].right_child;
            int node_triangle_count = g_bvh[g_bvh_offset + 1 + node_index].data[0];
            for (int i = 0; i < node_triangle_count; ++i)
            {
                int prim_id = first_triangle +i;
                bool front_face;
                if (IntersectLeafTriangle(vertex_pool_desc, 0, 0, CULL_MODE_NONE, g_bvh[g_bvh_offset+1 + node_index], prim_id, ray_d, ray_o, ray_mint, ray_maxt, uv, front_face))
                {
                #if ANY_HIT
                    #if FULL_HIT
                        g_hits[gidx].uv = uv;
                        g_hits[gidx].prim_id = g_bvh[g_bvh_offset+1 + node_index].right_child;
                        g_hits[gidx].inst_id = 0;
                    #else
                        g_hits[gidx].inst_id = g_bvh[g_bvh_offset+1 + node_index].right_child;
                    #endif
                    return;
                #else
                    closest_prim = g_bvh[g_bvh_offset+1 + node_index].right_child;
                #endif
                }
            }
        }
        else
        {
            uint2 result = IntersectInternalNode(g_bvh[g_bvh_offset+1 + node_index], ray_invd, ray_o, ray_mint, ray_maxt);

            if (result.y != INVALID_NODE)
            {
                if (lds_sptr - lds_sbegin >= LDS_STACK_SIZE)
                {
                    for (int i = 1; i < LDS_STACK_SIZE; ++i)
                    {
                        g_stack[sptr + i] = lds_stack[lds_sbegin + i];
                    }

                    sptr += LDS_STACK_SIZE;
                    lds_sptr = lds_sbegin + 1;
                }
                lds_stack[lds_sptr++] = result.y;
            }
            if (result.x != INVALID_NODE)
            {
                node_index = result.x;
                continue;
            }
        }

        node_index = lds_stack[--lds_sptr];
        if (node_index == INVALID_NODE)
        {
            if (lds_sptr == lds_sbegin && sptr > sbegin)
            {
                sptr -= LDS_STACK_SIZE;
                for (int i = 1; i < LDS_STACK_SIZE; ++i)
                {
                    lds_stack[lds_sbegin + i] = g_stack[sptr + i];
                }

                lds_sptr = lds_sbegin + LDS_STACK_SIZE;
            }
            if (lds_sptr > lds_sbegin)
            {
                node_index = lds_stack[--lds_sptr];
            }
        }
    }
    // fill-in hit output
#if !(ANY_HIT)
    if (closest_prim != INVALID_NODE)
    {
    #if FULL_HIT
        g_hits[gidx].uv = uv;
        g_hits[gidx].prim_id = closest_prim;
        g_hits[gidx].inst_id = 0;
    #else
        g_hits[gidx].inst_id = closest_prim;
    #endif
    }
    else
#endif
    {
        g_hits[gidx].inst_id = INVALID_NODE;
    }
}
// clang-format on
