using System;
using System.ComponentModel;
using UnityEngine.Playables;
using UnityEngine.Timeline;

namespace UnityEngine.Sequences.Timeline
{
    /// <summary>
    /// The StoryboardTrack supports StoryboardPlayableAsset in order to create a Storyboard in Timeline. This allows
    /// users to iterate on their cinematic timing and have a base for blocking in Unity.
    /// </summary>
    [Serializable]
    [DisplayName("Storyboard Track")]
    [TrackClipType(typeof(StoryboardPlayableAsset))]
    [TrackColor(237 / 255f, 126 / 255f, 2 / 255f)] // To ask UX
    public class StoryboardTrack : TrackAsset
    {
        /// <summary>
        /// This is the default duration of each newly created clip on the Storyboard track. By default it is set to
        /// 3 seconds, which means that every new Storyboard image added via a new clip on the track will last for 3
        /// seconds.
        /// </summary>
        /// <remarks>Changing this value does not affect the duration of existing clips.</remarks>
        [Tooltip("Clips created in this track will be created with this default duration." +
            "Changing this value with not change the length of pre-existing Clips")]
        [SerializeField] public double defaultFrameDuration = 3;

        /// <summary>
        /// The StoryboardTrack uses Canvas to display the different Storyboard frames. Use this parameter to
        /// control the <see cref="UnityEngine.Canvas.sortingOrder"/> value.
        /// </summary>
        [Tooltip("sorting order of the Storyboard Canvas")]
        [SerializeField] public int sortOrder;

        // [doc-replica] com.unity.timeline
        /// <summary>
        /// Creates a mixer used to blend playables generated by clips on the track.
        /// </summary>
        /// <param name="graph">The graph to inject playables into.</param>
        /// <param name="go">The GameObject that requested the graph.</param>
        /// <param name="inputCount">The number of playables from clips that will be inputs to the returned mixer.</param>
        /// <returns>A handle to the Playable node representing the mixer.</returns>
        public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
        {
            var mixer =  ScriptPlayable<StoryboardMixerBehaviour>.Create(graph, inputCount);

            mixer.GetBehaviour().canvas.sortingOrder = sortOrder;
            return mixer;
        }

        // [doc-replica] com.unity.timeline
        /// <summary>
        /// Called when a clip is created on a track.
        /// </summary>
        /// <param name="clip">The timeline clip added to this track</param>
        protected override void OnCreateClip(TimelineClip clip)
        {
            clip.duration = defaultFrameDuration;
            base.OnCreateClip(clip);
        }
    }
}
